require 'yaml'
require 'json'
require 'erb'
require 'rake-pipeline-web-filters/ordering_concat_filter'
require 'rake-pipeline-web-filters/markdown_compiler'

WebFilters = Rake::Pipeline::Web::Filters

input "assets"
output "output"

class StepFilter < Filter
  def generate_output(inputs, output)
    inputs.each do |input|
      yaml = YAML.load(input.read)
      code = "Tutorial.tutorialController.addStep({\n"
      code << yaml.map do |key,value|
        value = value.sub(/\n+$/,'')
        value = (key == "validator") ? "function(context){\n#{value}\n}" : value.to_json
        "  #{key}: #{value}"
      end.join(",\n")
      code << "\n});"
      output.write(code)
    end
  end
end

class HTMLWrapperFilter < Filter
  def initialize(options={})
    @options = options
    super()
  end

  def generate_output(inputs, output)
    template = @template || create_template
    inputs.each do |input|
      output.write render_template {
        input.read
      }
    end
  end

  def create_template
    template = File.read(@options[:template])
    @template = ERB.new(template)
  end

  def render_template
    @template.result(binding)
  end
end

match "tutorial/steps/*.yml" do
  filter StepFilter do |path|
    path.sub(/\.yml$/, '.js')
  end
end

match "tutorial/**/*.js" do
  filter WebFilters::OrderingConcatFilter, ['tutorial/tutorial.js'], 'tutorial.js'
end

match "docs/**/*.md" do
  sections = [ 'introduction', 'application', 'object_model', 'handlebars', 'views' ]
  sections.map! { |file| "docs/#{file}.html" }

  filter WebFilters::MarkdownCompiler
  filter HTMLWrapperFilter, :template => 'assets/docs/_section.erb'

  filter WebFilters::OrderingConcatFilter, sections, "documention.html"
  filter HTMLWrapperFilter, :template => 'assets/docs/_documentation.erb'
  filter ConcatFilter, "index.html" #"documentation/index.html"
end

# Hide for now
match "tutorial.html" do
  filter ConcatFilter, ".hidden"
end

# vim: filetype=ruby
